# Stage 4 — Joint Regularization (Aug + Recipe)
# Use Step 3 resolved winner as --base; tune augmentation jointly with optimization & budget.

# --- training budget / loader (longer for aug) ---
epochs:
  method: int
  low: 70
  high: 110
early_stop:
  method: int
  low: 10
  high: 16
batch_size:
  method: categorical
  choices: [8, 16]

# --- optimizer & intrinsic regularization (lighter with aug) ---
lr:
  method: log_uniform
  low: 1.0e-5
  high: 6.0e-4
weight_decay:
  method: log_uniform
  low: 1.0e-6
  high: 4.0e-4
drop_prob:
  method: uniform
  low: 0.15
  high: 0.45
scheduler_patience:
  method: int
  low: 8
  high: 14

# --- stability controls (warm-ups) ---
lr_warmup_frac:
  method: uniform
  low: 0.00
  high: 0.40
lr_warmup_init:
  method: uniform
  low: 0.00
  high: 0.50
aug_warmup_frac:
  method: uniform
  low: 0.10
  high: 0.40

# --- augmentation (train-only; include “off” in ranges) ---
mixup_alpha:
  method: uniform
  low: 0.00
  high: 0.25

shift_p:
  method: uniform
  low: 0.00
  high: 0.30
shift_max_frac:
  method: uniform
  low: 0.00
  high: 0.05

scale_p:
  method: uniform
  low: 0.00
  high: 0.20
scale_min:
  method: uniform
  low: 0.97
  high: 1.03
scale_max:
  method: uniform
  low: 1.00
  high: 1.08

noise_p:
  method: uniform
  low: 0.00
  high: 0.25
noise_std:
  method: uniform
  low: 0.002
  high: 0.015

time_mask_p:
  method: uniform
  low: 0.00
  high: 0.30
time_mask_frac:
  method: uniform
  low: 0.02
  high: 0.12

chan_mask_p:
  method: uniform
  low: 0.00
  high: 0.35
chan_mask_ratio:
  method: uniform
  low: 0.03
  high: 0.08

# --- optional crop exploration (enable only if you want it) ---
# crop_ms:
#   method: categorical
#   choices:
#     - [0, 496]
#     - [50, 400]
#     - [80, 380]
