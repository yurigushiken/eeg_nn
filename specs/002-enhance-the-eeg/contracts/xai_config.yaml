# XAI Configuration Contract Schema
# This file documents the expected structure and constraints for configs/xai_defaults.yaml
# It serves as a contract for the XAI system's configuration interface

schema_version: "1.0"
description: "Configuration schema for XAI analysis system"

# ==================== Required Fields ====================

xai_top_k_channels:
  type: integer
  required: true
  constraints:
    minimum: 1
    maximum: 256  # Reasonable upper bound for EEG channel count
  default: 10
  description: "Number of most important channels to highlight in topomaps and reports"
  examples:
    - 10   # Default: top 10 channels
    - 15   # Extended list for detailed analysis
    - 5    # Focused summary

peak_window_ms:
  type: float
  required: true
  constraints:
    minimum: 10.0   # Below 10ms likely too narrow for meaningful EEG analysis
    maximum: 1000.0  # Above 1 second likely spans entire epoch
  default: 100.0
  units: milliseconds
  description: "Duration of temporal window centered on peaks for spatio-temporal event analysis"
  examples:
    - 50.0   # Narrow window (high temporal precision)
    - 100.0  # Default (balanced)
    - 200.0  # Wide window (more stable estimates)

tf_morlet_freqs:
  type: array
  item_type: float
  required: true
  constraints:
    min_length: 1
    max_length: 50  # Practical upper limit for TFR computation
    item_constraints:
      minimum: 0.1   # Below 0.1 Hz requires very long signals
      maximum: 200.0  # Above Nyquist for typical EEG sampling (500 Hz → 250 Hz max)
    ordering: ascending  # Frequencies should be in increasing order
  default: [4, 8, 13, 30]
  units: Hertz
  description: "Frequency bins for Morlet wavelet time-frequency decomposition"
  examples:
    - [4, 8, 13, 30]              # Default: theta, alpha, beta bands
    - [2, 4, 8, 13, 20, 30]       # Extended with delta and high-beta
    - [8, 10, 12, 15, 20, 25, 30] # Fine-grained alpha-beta range
  notes:
    - "Lowest frequency must satisfy wavelet length constraint:"
    - "  required_samples >= (n_cycles * sfreq / freq)"
    - "  where n_cycles = freq / 2.0 by default"
    - "For freq=4 Hz, sfreq=500 Hz: requires >= 250 samples (500 ms)"

gradcam_target_layer:
  type: string
  required: true
  constraints:
    pattern: "^[a-zA-Z_][a-zA-Z0-9_]*(\\.[a-zA-Z_][a-zA-Z0-9_]*)*$"
    # Regex: dotted path notation (e.g., "block_1.0", "features.3")
  default: "features.3"
  description: "Dotted path to target layer for Grad-CAM attribution computation"
  examples:
    - "block_1.0"     # EEGNeX block 1, first layer
    - "block_1.1"     # EEGNeX block 1, second layer
    - "block_2.0"     # EEGNeX block 2, first layer
    - "features.3"    # Generic feature extractor, layer 3
  requirements:
    - "Layer must exist in the model architecture"
    - "Layer output must preserve spatial (channel) dimension:"
    - "  - Good: output shape (batch, channels > 1, time) or (batch, channels > 1)"
    - "  - Bad: output shape (batch, 1, time) → produces uniform topomaps"
  model_specific_recommendations:
    eegnex:
      good_layers: ["block_1.0", "block_1.1", "block_2.0"]
      poor_layers: ["block_3.0", "block_4.0", "block_5.0"]
      rationale: "Later blocks collapse spatial dimension to single channel"

# ==================== Optional Fields (future extensions) ====================

# n_integration_steps:
#   type: integer
#   required: false
#   default: 50
#   constraints:
#     minimum: 10
#     maximum: 500
#   description: "Number of steps for Integrated Gradients path integration"

# gradcam_upsample:
#   type: boolean
#   required: false
#   default: true
#   description: "Whether to upsample Grad-CAM to match input resolution"

# baseline_type:
#   type: string
#   required: false
#   default: "zeros"
#   enum: ["zeros", "mean", "gaussian"]
#   description: "Baseline for Integrated Gradients computation"

# ==================== Validation Rules ====================

validation_rules:
  - name: "tf_freqs_ascending"
    description: "Time-frequency bins must be in ascending order"
    check: "tf_morlet_freqs[i] < tf_morlet_freqs[i+1] for all i"
    severity: "error"
  
  - name: "tf_freqs_positive"
    description: "All frequencies must be positive"
    check: "all(f > 0 for f in tf_morlet_freqs)"
    severity: "error"
  
  - name: "peak_window_reasonable"
    description: "Peak window should be smaller than typical epoch duration"
    check: "peak_window_ms < 1000.0"
    severity: "warning"
  
  - name: "top_k_channels_reasonable"
    description: "Top-K should not exceed total channel count"
    check: "xai_top_k_channels <= n_channels (runtime check)"
    severity: "warning"
    note: "n_channels determined at runtime from dataset"

# ==================== Merging Behavior ====================

config_merging:
  priority_order:
    - source: "run_config"
      description: "Values from summary_*.json → hyper dict"
      precedence: 1  # Highest
    
    - source: "xai_defaults.yaml"
      description: "Values from configs/xai_defaults.yaml"
      precedence: 2
    
    - source: "hardcoded_defaults"
      description: "Fallback defaults in scripts/run_xai_analysis.py"
      precedence: 3  # Lowest
  
  merge_strategy: "shallow"
  description: |
    For each key in this schema:
      1. Check if key exists in run_config → use if present
      2. Else, check if key exists in xai_defaults.yaml → use if present
      3. Else, use hardcoded default
    
    No deep merging of nested structures (future extension if needed)

# ==================== Type Definitions ====================

type_system:
  integer:
    python_type: "int"
    yaml_type: "!!int"
    json_schema_type: "integer"
  
  float:
    python_type: "float"
    yaml_type: "!!float"
    json_schema_type: "number"
  
  string:
    python_type: "str"
    yaml_type: "!!str"
    json_schema_type: "string"
  
  array:
    python_type: "list"
    yaml_type: "!!seq"
    json_schema_type: "array"
  
  boolean:
    python_type: "bool"
    yaml_type: "!!bool"
    json_schema_type: "boolean"

# ==================== Example Configurations ====================

examples:
  minimal:
    description: "Minimal valid configuration using all defaults"
    config:
      xai_top_k_channels: 10
      peak_window_ms: 100.0
      tf_morlet_freqs: [4, 8, 13, 30]
      gradcam_target_layer: "features.3"
  
  extended:
    description: "Extended configuration for detailed analysis"
    config:
      xai_top_k_channels: 15
      peak_window_ms: 150.0
      tf_morlet_freqs: [2, 4, 6, 8, 10, 13, 20, 30]
      gradcam_target_layer: "block_1.1"
  
  focused:
    description: "Focused configuration for quick analysis"
    config:
      xai_top_k_channels: 5
      peak_window_ms: 50.0
      tf_morlet_freqs: [8, 13, 30]
      gradcam_target_layer: "block_2.0"
  
  high_res_tf:
    description: "High-resolution time-frequency analysis"
    config:
      xai_top_k_channels: 10
      peak_window_ms: 100.0
      tf_morlet_freqs: [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 21, 24, 27, 30]
      gradcam_target_layer: "features.3"

# ==================== Error Messages ====================

error_messages:
  missing_required_key:
    template: "Required XAI config key '{key}' not found in xai_defaults.yaml or run config"
    severity: "error"
    action: "Use hardcoded default: {default_value}"
  
  invalid_type:
    template: "XAI config key '{key}' has invalid type: expected {expected_type}, got {actual_type}"
    severity: "error"
    action: "Reject config and abort"
  
  constraint_violation:
    template: "XAI config key '{key}' violates constraint: {constraint} (value: {value})"
    severity: "error"
    action: "Reject config and abort"
  
  layer_not_found:
    template: "Grad-CAM target layer '{layer}' not found in model. Available layers: {available_layers}"
    severity: "warning"
    action: "Skip Grad-CAM analysis, continue with IG"
  
  tf_signal_too_short:
    template: "Signal too short ({n_samples} samples) for TFR with lowest freq {min_freq} Hz (requires >= {required_samples} samples)"
    severity: "warning"
    action: "Skip time-frequency analysis"
  
  montage_attachment_failed:
    template: "Montage attachment failed: {reason}. Channel names: {ch_names}"
    severity: "warning"
    action: "Skip topomaps, continue with heatmaps"

# ==================== Testing Contract ====================

test_requirements:
  contract_test:
    file: "tests/contract/test_xai_config.py"
    description: "Validates xai_defaults.yaml against this schema"
    assertions:
      - "xai_defaults.yaml exists"
      - "All required keys present"
      - "All values have correct types"
      - "All constraints satisfied"
      - "Example configs are valid"
  
  integration_test:
    file: "tests/integration/test_xai_pipeline.py"
    description: "End-to-end test using minimal fixture"
    assertions:
      - "Config loads successfully"
      - "Config merges correctly with run config"
      - "Pipeline runs without errors"
      - "Expected outputs generated"

# ==================== Changelog ====================

changelog:
  - version: "1.0"
    date: "2025-01-03"
    changes:
      - "Initial schema for feature 002 (XAI enhancement)"
      - "Defined 4 required configuration keys"
      - "Established merging priority and validation rules"
      - "Documented error handling and graceful degradation"

