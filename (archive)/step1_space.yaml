# Step 1 space: preprocessing + network + training (no augmentation)
f_lo: { method: uniform, low: 0.5, high: 2.0 }
f_hi: { method: uniform, low: 35.0, high: 50.0 }
t1_s: { method: uniform, low: 0.5, high: 0.8 }
cz_step: { method: int, low: 1, high: 5 }

# network
depth_multiplier: { method: int, low: 1, high: 3 }
filter_1: { method: int, low: 8, high: 32 }
filter_2: { method: int, low: 16, high: 64 }
drop_prob: { method: uniform, low: 0.1, high: 0.6 }
kernel_block_1_2: { method: int, low: 16, high: 64 }
kernel_block_4: { method: int, low: 8, high: 32 }
kernel_block_5: { method: int, low: 8, high: 32 }
avg_pool_block4: { method: int, low: 2, high: 6 }
avg_pool_block5: { method: int, low: 4, high: 10 }
dilation_block_4: { method: int, low: 1, high: 4 }
dilation_block_5: { method: int, low: 1, high: 6 }
activation: { method: categorical, choices: [elu, relu, gelu] }

# training
lr: { method: log_uniform, low: 1.0e-5, high: 1.0e-3 }
batch_size: { method: categorical, choices: [8, 16, 32] }
epochs: { method: int, low: 30, high: 60 }
early_stop: { method: int, low: 8, high: 15 }

